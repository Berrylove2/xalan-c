<?xml version="1.0" standalone="no"?>
<!DOCTYPE s1 SYSTEM "../../style/dtd/document.dtd">
<!--
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements. See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership. The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the  "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
-->

<s1 title="Building Xalan-C/C++">
<ul>
<li><link anchor="cmakebuild">CMake build</link></li>
<li><link anchor="unixbldenv">UNIX Build Environment</link></li>
  <ul>
  <li><link anchor="unixlibpath">Finding Runtime Libraries</link></li>
  <li><link anchor="unixbldxalan">Building the Xalan-C/C++ XSLT Libraries for UNIX</link></li>
  </ul>
<li><link anchor="unixcompileref">Reference on Unix Platforms and C++ Compilers</link></li>
</ul>

<br/>
<p>The Xalan-C/C++ XSLT library is built upon the Xerces-C/C++ XML Parser library. 
   Before compiling the Xalan-C/C++ XSLT library, you must have a usable Xerces-C/C++ library.
</p>
<p>You can either install a compatible binary distribution of Xerces-C/C++ or 
   build your own from a source distribution of Xerces-C/C++.
</p>
<p>You can get more information on the Xerces-C/C++ distributions at the 
   <jump href="http://xerces.apache.org/xerces-c">http://xerces.apache.org/xerces-c</jump> web site.
</p>

<anchor name="cmakebuild"/>
<s2 title="CMake build"/>

<p>The CMake build tool may be used to build Xalan-C on any platform.</p>

</s2>

<anchor name="unixbldenv"/>
<s2 title="UNIX Build Environment">

<p>I don't like building sources using root or superuser login.  I like to do builds in a directory separated from the source tree.  A debug build and release build will create shared objects of the same name.  I like to target these builds to separate directory trees.
</p>
<p>Release builds are targeted at the <code>/usr/local</code> file system.
</p>
<p>Debug builds are targeted at the <code>/opt/apache/debug</code> file system.
</p>
<p>Source trees are referenced wherever convenient.  Using the (<code>--srcdir</code>) configuration parameter allows the source tree to be separate from the build tree.  The source tree can even reside on read-only media.
</p>
<p>Product builds are done in a build directory path separate from the source tree.  This is the working directory from where you perform your builds and installs.
</p>
<p><em>Source Trees:</em> (<code>--srcdir</code>) configuration parameter
</p>
<p>
&nbsp;&nbsp;	<code>/opt/xerces/c/&lt;trunk&gt;/</code>&lt;the Xerces-C/C++ XML parser library source distribution&gt;
<br/>
&nbsp;&nbsp;	<code>/opt/xalan/c/&lt;trunk&gt;</code>/&lt;the Xalan-C/C++ XSLT library source distribution&gt;
</p>
<p>If the source distribution is well-constructed, the source directory trees can be read-only.
</p>
<p><em>Binary Installation Trees:</em> (<code>--prefix</code>) configuration parameter
</p>
<p>
&nbsp;&nbsp;	<code>/usr/local/</code>&nbsp; &lt;the target for the 
release binary installation&gt;
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;	<code>./bin</code>&nbsp;&nbsp;&nbsp;&nbsp;	The sample programs
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;	<code>./lib</code>&nbsp;&nbsp;&nbsp;&nbsp;	The shared and static library files
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;	<code>./include</code>&nbsp;&nbsp;	The library header files
<br/>
<br/>
&nbsp;&nbsp;	<code>/opt/apache/debug/</code>&nbsp; &lt;the target for the 
debug binary installation&gt;
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;	<code>./bin</code>&nbsp;&nbsp;&nbsp;&nbsp;	The sample programs
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;	<code>./lib</code>&nbsp;&nbsp;&nbsp;&nbsp;	The shared and static library files
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;	<code>./include</code>&nbsp;&nbsp;	The library header files
</p>

<p>The default (<code>--prefix</code>) value is <code>/usr/local</code> which I use for release builds.
</p>
<p>I choose (<code>--prefix</code>) value of <code>/opt/apache/debug</code> for debug builds.
</p>

<p><em>Build Tree:</em> The build working directory tree
</p>
<p>&nbsp;&nbsp;	<code>/&lt;user-directory&gt;/Build/</code>
</p>

<p>You can use any empty file system or directory path with write access.  Starting with an empty directory is a quick way to do a clean build.  Make this empty directory to be your current working directory.
</p>
<p>I also like to make some shell scripts so that the build process can be automated. I locate these scripts outside of the Build directory so they don't get lost when I purge directory content.
</p>
<p>
&nbsp;&nbsp;	<code>../build-xerces-lib.sh</code>
</p>
<p>
&nbsp;&nbsp;	<code>../build-xalan-lib.sh</code>
</p>
<p>
&nbsp;&nbsp;	<code>../build-xalan-app.sh</code>
</p>
<p>I generate these shell scripts with a text editor and use them to minimize keyboard typing errors.
</p>
<anchor name="unixlibpath"/>
<s3 title="Finding Runtime Libraries">

<p>The various types of UNIX operating systems have differing requirements for finding libraries at runtime.
</p>
<table>
<tr><th>Operating System</th><th>Library Path Environment</th></tr>
<tr><td>Solaris and Linux</td><td>LD_LIBRARY_PATH</td></tr>
<tr><td>HP-UX</td><td>SHLIB_PATH</td></tr>
<tr><td>AIX and BSD</td><td>LIBPATH</td></tr>
<tr><td>Mac OS X</td><td>DYLD_LIBRARY_PATH</td></tr>
<tr><td>Cygwin and  MinGW</td><td>PATH</td></tr>
</table>

<p>The Xalan-C/C++ and Xerces-C/C++ shared library objects must be installed in a reachable library path for your platform.  The <code>make</code> step creates the libraries in the <code>lib</code> subdirectory of your working directory.  The <code>make install</code> step installs these shared objects to the designated <code>{prefix}/lib</code> directory or another directory defined by the <code>--libdir</code> configuration parameter.
</p>
<p>In many cases, the <code>/usr/local/lib</code> is already cached in <code>/etc/ld.so.cache</code> or included by <code>/etc/ld.so.conf</code>.  The library path environment variable is then used for exceptions.  The explicit library path environment variable usually takes precedence over the other methods of finding shared library runtimes.  This is useful if you wish to use a debug environment on the same platform that also includes release libraries of the same name.
</p>
</s3>

<anchor name="unixbldxalan"/>
<s3 title="Building the Xalan-C/C++ XSLT Libraries for UNIX">


<p>I don't like building sources from a root or superuser login.  I also like to do builds in a directory separated from the source tree.
</p>

<p>If your sources tree is read-only and some required files are not executable, then you need to copy the source to writable media and change the execute attributes of specific files.  This command sequence will copy an entire directory tree from <code>{source-dir}</code> to <code>{dest-dir}</code>.
</p>
<source>
	cd {source-dir}
	find . | cpio -pdmuv {dest-dir}
</source>
<p>Connect to the <code>{xalan-src}</code> directory and make specific files executable.
</p>
<source>
	cd {xalan-src}
	chmod 755 runConfigure configure install-sh
</source>
<p>Connect to your empty build directory and construct a script for building the Xalan-C/C++ XSLT products.
</p>

<p>The Xalan-C/C++ configuration process uses the <code>runConfigure</code> script as a front-end to the automake <code>configure</code> script. Your shell command script should therefore use the <code>runConfigure</code> script.
</p>

<table>
<tr><th colspan="2">runConfigure Options</th></tr>
<tr><th>Option</th><th>Description</th></tr>
<tr><td>-p</td><td>Build platform: aix, linux, freebsd, netbsd, solaris, hp-10, hp-11, hp11-ia64, 
   irix, tru64, macosx, cygwin</td></tr>
<tr><td>-c</td><td>C compiler name: gcc, cc, c89, xlc, xlc_r, acc (default = gcc)</td></tr>
<tr><td>-x</td><td>C++ compiler name: g++, CC, C89, xlC, xlC_r, aCC (default = g++)</td></tr>
<tr><td>-d</td><td>Indicates a debug build, takes no values, default is No Debug</td></tr>
<tr><td>-t</td><td>Transcoder to use: 'icu', (Default is null, the Xerces-C/C++ transcoder)</td></tr>
<tr><td>-m</td><td>Type of localization support: inmem, icu, nls (default is inmem)</td></tr>
<tr><td>-M</td><td>Locale for message localization: "en_US"</td></tr>
<tr><td>-r</td><td>Threads option: pthread, dce (default is pthread)</td></tr>
<tr><td>-b</td><td>Specify 32 or 64 bit build (Default is 32-bit)<br/>
    On Linux, the 32/64 build is determined by the compiler, kernel, and glibc.</td></tr>
<tr><td>-P</td><td>Install root directory: value is assigned to the <code>--prefix</code> configure parameter</td></tr>
<tr><td>-l</td><td>Extra link options (assigned to <code>LDFLAGS</code>)</td></tr>
<tr><td>-z</td><td>Extra compiler options (assigned to <code>CFLAGS</code> and <code>CXXFLAGS</code>)</td></tr>
<tr><td>-C</td><td>Extra configuration options (i.e. <code>--srcdir=${SourceDir}</code>)</td></tr>
<tr><td>-h</td><td>Print the <code>runConfigure</code> help and exit</td></tr>
</table>

<p>Here are the names of some C/C++ compilers associated with commercial UNIX operating systems used to build Xalan-C/C++ and Xerces-C/C++ packages.
</p>

<table>
<tr><th>System</th><th>Platform</th><th>C Compiler</th><th>C++ Compiler</th><th>Comment</th></tr>
<tr><td>AIX</td><td>aix</td><td>xlc_r</td><td>xlC_r</td><td>thread support</td></tr>
<tr><td>AIX</td><td>aix</td><td>xlc</td><td>xlC</td><td>no thread support</td></tr>
<tr><td>Cygwin</td><td>cygwin</td><td>gcc</td><td>g++</td><td></td></tr>
<tr><td>HP-UX</td><td>hp-11</td><td>cc</td><td>aCC</td><td></td></tr>
<tr><td>HP-UX</td><td>hp-11-ia64</td><td>cc</td><td>aCC</td><td></td></tr>
<tr><td>Solaris</td><td>solaris</td><td>cc</td><td>CC</td><td></td></tr>
</table>

<p>The following example shows you how to construct a usable script with your favorite text editor.
</p>

<source>
#!/bin/sh
# Script to build and install Xalan-C/C++ products from sources

# The Source and Target Directories for Debug Build

# SourceDir="--srcdir=/opt/xalan/c/trunk"
# DestDir="--prefix=/opt/apache/debug"

# The Source and Target Directories for Release Build

SourceDir="--srcdir=/opt/xalan/c/trunk"
DestDir="--prefix=/usr/local"

# The Xerces and Xalan package directories

export XALANCROOT=${SourceDir}
export XERCESCROOT=${DestDir}

# If compiling with IBM-ICU support, the ICUROOT environment variable 
# needs to be defined to specify where the ICU libraries are installed.
# Specifically, the following directories are accessed:
#	${ICUROOT}/lib, ${ICUROOT}/include, ${ICUROOT}/data
#	export ICUROOT=/usr/local

export PATH=$PATH:${SourceDir}

# Debug Configure

# runConfigure -p linux -d -c gcc -x g++ -P "${DestDir}" \
#   -C "--srcdir=${SourceDir}"

# Release Configure

runConfigure -p linux -c gcc -x g++ -P "${DestDir}" \
   -C "--srcdir=${SourceDir}"

# Connect to configured src subdirectory to build the library without
# sample programs. If you run make from your build directory, then the
# library and all sample programs will be built.

cd src
make clean
make

# As a user with permissions to write to ${DestDir} install the Xalan-C/C++ products
#   ${DestDir}/bin   the Xalan command-line utility and sample programs
#   ${DestDir)/lib    the Xalan-C/C++ static and dynamic libraries
#   ${DestDir}/include/xalanc/*    The header files.

make install

## End of sample build script.
</source>

</s3>
</s2>
<anchor name="unixcompileref"/>
<s2 title="Reference on Unix Platforms and C++ Compilers">

<p>Some compilers and platforms may need configuration options and variables that differ from the default Linux build.  Beware that the runConfigure script for Xalan-C/C++ is a front-end that calls the configure script.  The following table is reference information for the build of Xerces-C/C++ version 3.x.  The C++ compiler for Xerces should be the same as used for Xalan builds.
</p>

<table>
<tr><th colspan="2">Configuration Options For Unix Platforms</th></tr>
<tr><th>Solaris x86</th><th>Sun CC</th></tr>
<tr><td colspan="2"><data>./configure CXX=CC CC=cc</data></td></tr>

<tr><th>Solaris x86-64</th><th>Sun CC</th></tr>
<tr><td colspan="2"><data>./configure CXX=cc CC=cc CFLAGS=-xarch=amd64 CXXFLAGS=-xarch=amd64</data><br/>
(newer Sun CC versions use -m64 instead of -arch=amd64)</td></tr>

<tr><th>Solaris Sparc</th><th>Sun CC</th></tr>
<tr><td colspan="2"><data>./configure CXX=CC CC=cc</data></td></tr>

<tr><th>Solaris Sparc v9</th><th>Sun CC</th></tr>
<tr><td colspan="2"><data>./configure CXX=cc CC=cc CFLAGS=-xarch=v9 CXXFLAGS=-xarch=v9<br/>
(newer Sun CC versions use -m64 instead of -arch=v9)</data></td></tr>

<tr><th>AIX PowerPC</th><th>IBM XLC++</th></tr>
<tr><td colspan="2"><data>./configure CXX=xlc_r CC=xlc_r<br/>
gmake libxerces_c_1a LDFLAGS=-qmkshrobj</data></td></tr>

<tr><th>AIX PowerPC-64</th><th>IBM XLC++</th></tr>
<tr><td colspan="2"><data>./configure CXX=xlc_r CC=xlc_r CXXFLAGS=-q64 CFLAGS=-q64<br/>
gmake libxerces_c_1a LDFLAGS=-qmkshrobj</data></td></tr>

<tr><th>HP-UX 1a-64-32</th><th>HP aCC</th></tr>
<tr><td colspan="2"><data>./configure CXX=aCC CC=aCC CFLAGS=-mt CXXFLAGS=-mt LDFLAGS=-mt</data></td></tr>

<tr><th>HP-UX 1a-64</th><th>HP aCC</th></tr>
<tr><td colspan="2"><data>./configure CXX=aCC CC=aCC CFLAGS=-mt CXXFLAGS=-"mt +DD64" LDFLAGS="-mt +DD64"</data></td></tr>

<tr><th>Mac OS X x86-64</th><th>GCC</th></tr>
<tr><td colspan="2"><data>./configure CFLAGS="-arch x86_64" CXXFLAGS="-arch x86_64"</data></td></tr>

<tr><th>Mac OS X PowerPC-64</th><th>GCC</th></tr>
<tr><td colspan="2"><data>./configure CFLAGS="-arch ppc64" CXXFLAGS="-arch ppc64"</data></td></tr>

<tr><th>Mac OS X x86/PowerPC</th><th>GCC</th></tr>
<tr><td colspan="2"><data>./configure --disable-dependency-tracking CFLAGS="arch i386 -arch ppc"<br/>
CXXFLAGS="-arch i386 -arch ppc"</data></td></tr>

<tr><th>MinGW x86</th><th>GCC</th></tr>
<tr><td colspan="2"><data>./configure LDFLAGS=-no-undefined</data></td></tr>

<tr><th>Cygwin x86</th><th>GCC</th></tr>
<tr><td colspan="2"><data>./configure LDFLAGS=-no-undefined</data></td></tr>
</table>
</s2>

</s1>
